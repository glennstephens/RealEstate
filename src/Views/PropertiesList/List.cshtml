@model RealEstate.Models.PropertyListViewModel
@using X.PagedList.Mvc.Core;
@using X.PagedList.Mvc.Common;
@using X.PagedList;

@{
    ViewData["Title"] = "Property list";
}

<!-- Portfolio Section Heading -->
<h2 class="page-section-heading text-center text-uppercase text-secondary mb-0">Our properties</h2>

<!-- Icon Divider -->
<div class="divider-custom">
    <div class="divider-custom-line"></div>
    <div class="divider-custom-icon">
        <i class="fas fa-star"></i>
    </div>
    <div class="divider-custom-line"></div>
</div>

<!-- Portfolio Grid Items -->
<div class="row">
    @foreach (var item in Model.Properties)
    {
        <div class="col-md-6 col-lg-4">
            <div class="portfolio-item mx-auto modal-content"
                 data-toggle="modal"
                 data-target="#modalContainer"
                 data-contenturl="@Url.RouteUrl("PropertyDetailsRoute", new { propertyId = item.Property.Id })">
                <div class="portfolio-item-caption d-flex align-items-center justify-content-center h-100 w-100">
                    <div class="portfolio-item-caption-content text-center text-white">
                        <i class="fas fa-plus fa-3x"></i>
                    </div>
                </div>
                <img class="img-thumbnail rounded" src="@item.ImageUrl" alt="">
                <span class="text-center">@item.Property.Name</span>
            </div>
        </div>
    }
</div>

@(Html.PagedListPager((IPagedList)Model.Properties,
pageNum => Url.RouteUrl("GetProperties", new { page = pageNum, searchString = Model.SearchString, sortBy = Model.SortBy, sortAscending = Model.SortAscending }),
new PagedListRenderOptions
{
    LiElementClasses = new string[] { "page-item" },
    PageClasses = new string[] { "page-link" }
}))
